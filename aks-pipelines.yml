# trigger :
#  batch: true
#  branches:
#    include:
#      -  main
# pr:
#  branches:
#    include:
#      - main

trigger: none
pool:
 vmImage: ubuntu-latest

parameters:
  - name: environment
    type: string
    displayName: Select environment to provision infrastructure
    default: dev
    values:
      - dev
      - qa
      - staging
      - prod

variables:
  imageName: projappnode
  acrName: 'proj${{ parameters.environment }}acr'
  acrLoginServer: 'proj${{ parameters.environment }}acr.azurecr.io'
  aksResourceGroup: 'proj-${{ parameters.environment }}-rg'
  aksClusterName: 'proj-${{ parameters.environment }}-aks'
  kvName: '${{ parameters.environment }}-ak-kv'
  tenantId: b41b72d0-4e9f-4c26-8a69-f949f367c91d
  namespace: node-app

stages:
  - stage: BuildAndPush
    displayName: Build and Push Image to ACR
    jobs:
      - job: Build
        displayName: Build and Push

        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: adeebahmed_khan@epam.com(5cee968e-0ccf-40be-819c-34d922970b94)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acrName)
                docker build -t $(acrLoginServer)/$(imageName):$(Build.BuildId) ./nodejs-app
                docker push $(acrLoginServer)/$(imageName):$(Build.BuildId)

          - publish: $(Build.SourcesDirectory)/terraform/k8s-manifests
            artifact: manifests
      
  - stage: DeployToAKS
    displayName: Deploy App to AKS
    dependsOn: BuildAndPush
    jobs:
      - deployment: DeployToAKS
        displayName: Deploy to AKS Cluster
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: manifests

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: adeebahmed_khan@epam.com(5cee968e-0ccf-40be-819c-34d922970b94)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      environment="${{ parameters.environment }}"
                      aksClusterName="proj-${environment}-aks"
                      aksResourceGroup="proj-${environment}-rg"

                     
                      echo "‚ÑπÔ∏è aksClusterName=$aksClusterName"
                      echo "‚ÑπÔ∏è aksResourceGroup=$aksResourceGroup"

                      az aks get-credentials --name $aksClusterName --resource-group $aksResourceGroup --admin --overwrite-existing
                      
                      
                      echo "üîç Validating cluster connection..."
                      kubectl config get-contexts
                      kubectl cluster-info || { echo "‚ùå Cluster not reachable. Check cluster name or credentials."; exit 1; }
                      
                      kubectl create ns node-app || true
      
                      sed -i "s|${acr_login_server}|$(acrLoginServer)|g" $(Pipeline.Workspace)/manifests/deployment.yaml
                      sed -i "s|${app_image_name}|$(imageName)|g" $(Pipeline.Workspace)/manifests/deployment.yaml
                      sed -i "s|${image_tag}|$(Build.BuildId)|g" $(Pipeline.Workspace)/manifests/deployment.yaml
  
                      sed -i "s|${key_vault_name}|$(kvName)|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml
                      sed -i "s|${tenant_id}|$(tenantId)|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml
                  

                      sql_username="${{ parameters.environment }}-sql-admin"
                      sql_password="${{ parameters.environment }}-sql-password"
                      sql_server="proj-${{ parameters.environment }}-sqlserver"
                      sql_db="proj-${{ parameters.environment }}-sqldb"
  
                      sed -i "s|\${sql_admin_secret_name}|$sql_username|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml
                      sed -i "s|\${sql_password_secret_name}|$sql_password|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml
                      sed -i "s|\${sql_server_name}|$sql_server|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml
                      sed -i "s|\${sql_db_name}|$sql_db|g" $(Pipeline.Workspace)/manifests/secret-provider.yaml


                      kubectl apply -f $(Pipeline.Workspace)/manifests/secret-provider.yaml --validate=false -n node-app
                      kubectl apply -f $(Pipeline.Workspace)/manifests/deployment.yaml --validate=false -n node-app
                      kubectl apply -f $(Pipeline.Workspace)/manifests/service.yaml --validate=false -n node-app
       

